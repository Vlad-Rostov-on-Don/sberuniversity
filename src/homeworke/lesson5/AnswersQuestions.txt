1. Почему на любом объекте можем вызвать метод getClass()?

Метод getClass() доступен для вызова на любом объекте в Java потому, что он является частью класса Object.
Класс Object — это корневой класс иерархии классов в Java, от которого наследуются все остальные классы.
Таким образом, каждый объект в Java имеет доступ ко всем методам класса Object, включая getClass().
Когда вы вызываете метод getClass() на каком-то объекте, этот метод возвращает экземпляр класса Class,
представляющий класс объекта, на котором был вызван метод. Этот класс содержит информацию о самом классе,
такую как имя класса, методы, поля и другие метаданные.

2. Почему на любом классе можем вызвать .class?

В Java каждый объект имеет метод getClass(), который возвращает объект класса Class.
Этот класс предоставляет информацию о самом объекте, включая его имя, методы, поля и другие метаданные.
Когда мы вызываем .class для какого-то типа данных, мы получаем экземпляр класса Class, представляющий этот конкретный тип.
Таким образом, когда вы вызываете .class у любого класса, например, String.class, вы получаете объект класса Class,
который представляет сам класс String.
Этот механизм позволяет работать с рефлексией в Java, то есть динамически получать доступ к информации о классах,
их методах и полях во время выполнения программы.

3. В чём отличие динамического прокси от статического? Приведите преимущества и недостатки.

Динамический и статический прокси — это два подхода к созданию прокси-классов, которые позволяют управлять вызовами методов
других объектов без изменения исходного кода этих объектов. Прокси-классы часто используются для добавления дополнительных
функциональностей, таких как логирование, кэширование, безопасность и т.п., вокруг существующих классов.

 - Динамические прокси:

Динамические прокси создаются во время выполнения программы. Они используют возможности рефлексии языка программирования для
создания прокси-класса, который может перехватывать любые вызовы методов целевого объекта. Это достигается за счет реализации
интерфейсов или использования общих суперклассов.

Преимущества:
1. Универсальность: Динамическое создание прокси позволяет легко создавать прокси для любых классов, реализующих определенный
интерфейс или наследуемых от определенного базового класса.
2. Гибкость: Можно добавлять дополнительные функциональные возможности на лету, без необходимости заранее знать,
какие именно методы будут вызваны.
3. Минимум ручного труда: Для создания динамических прокси требуется меньше ручной работы, так как они автоматически
генерируются системой.
4. Поддержка множества интерфейсов: Один динамический прокси может реализовать несколько интерфейсов одновременно.

Недостатки:
1. Производительность: Создание и использование динамических прокси требует значительных вычислительных ресурсов,
особенно при большом количестве вызовов.
2. Сложность: Использование рефлексии делает код сложнее для понимания и поддержки.
3. Ограничения: Динамические прокси могут иметь ограничения в зависимости от возможностей системы рефлексии конкретного
языка программирования.

 - Статические прокси

Статические прокси создаются вручную программистом до компиляции программы. В этом случае прокси-класс создается как отдельный класс,
который реализует тот же интерфейс или наследует тот же базовый класс, что и целевой объект, и делегирует выполнение методов
этому объекту.

Преимущества:
1. Производительность: Статически созданные прокси работают быстрее, поскольку все необходимые операции выполняются на этапе компиляции.
2. Простота: Код статических прокси проще понять и поддерживать, чем динамические.
3. Контроль: Программист полностью контролирует процесс создания прокси и может точно настроить его поведение.

Недостатки:
1. Жесткость: Требуется создать отдельные классы для каждого целевого объекта, что увеличивает объем кода и усложняет его поддержку.
2. Ручная работа: Необходимо вручную писать код для каждого метода, который нужно перехватить, что может быть трудоемким процессом.
3. Невозможность поддержки нескольких интерфейсов: Статический прокси обычно может реализовать только один интерфейс или
наследовать один базовый класс.

Сравнение:

- Когда использовать динамические прокси: Если вам нужна гибкость и универсальность, а также возможность динамической настройки
поведения на основе различных условий, лучше выбрать динамические прокси.
- Когда использовать статические прокси: Если производительность критична, и вы готовы вложиться в написание большего количества кода,
чтобы обеспечить контроль над каждым аспектом поведения прокси, выбирайте статические прокси.
