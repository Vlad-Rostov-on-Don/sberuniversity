1. Как получить ссылку на текущий поток?
Ссылку на текущий поток можно получить с помощью статического метода Thread.currentThread().

Thread.currentThread():
 - возвращает объект Thread, представляющий поток, в котором вызывается метод.
 - метод полезен для получения информации о потоке, например, его имени, приоритете, идентификаторе и состоянии.


2. Зачем нужно ключевое слово synchronized ? На что его можно вещать(поле, метод, класс, конструктор..)?
Ключевое слово synchronized используется для управления доступом к критическим секциям кода в многопоточной среде.
Оно предотвращает одновременное выполнение кода несколькими потоками, защищая данные от некорректных изменений.

Synchronized:
1. Обеспечение взаимного исключения (Mutual Exclusion):
 -только один поток может выполнять блок или метод, помеченный synchronized, в данный момент времени.
2. Обеспечение видимости изменений:
 - гарантирует, что изменения переменных, сделанные одним потоком, будут видны другим потокам.

Использовать synchronized можно:
1. Методы
Методы, помеченные synchronized, защищают весь их код. Только один поток может выполнять такой метод на одном объекте
в данный момент.
2. Блоки кода
Синхронизация может быть применена к отдельной части метода, если требуется ограничить область блокировки.
Это позволяет избежать блокировки всего объекта.
3. Классы
Можно синхронизировать статический блок кода для синхронизации на уровне класса.
4. Конструкторы
Конструкторы не могут быть помечены synchronized, так как каждый поток создаёт новый объект, и синхронизация на уровне
объекта здесь бессмысленна. Однако можно использовать синхронизированные блоки внутри конструктора.


3. Захват какого монитора происходит при входе в synchronized метод/статик метод/блок?
 * Синхронизированный метод экземпляра (synchronized на методе экземпляра):
когда поток входит в synchronized метод экземпляра, он захватывает монитор объекта, на котором вызывается этот метод.
 * Синхронизированный статический метод (synchronized на статическом методе):
когда поток входит в synchronized статический метод, он захватывает монитор класса (Class объекта).
 * Синхронизированный блок (synchronized внутри метода):
когда поток входит в synchronized блок, он захватывает монитор объекта или класса, указанного в скобках.


4. Зачем нужно ключевое слово volatile ? На что его можно вещать(поле, метод, класс, конструктор..)?
В многопоточной программе потоки могут кэшировать переменные локально для повышения производительности.
Это может привести к тому, что изменения, сделанные одним потоком, будут невидимы для других потоков.

Volatile гарантирует:
1. Видимость изменений:
 - когда один поток изменяет значение переменной, другие потоки немедленно видят это изменение.
2. Запрет переупорядочивания операций:
 - компилятор и процессор не могут изменять порядок чтения и записи для переменной с volatile.

 volatile можно использовать только для полей класса.


5. Что делает метод Object#wait, Object#notify, Object#notifyAll?
Методы Object#wait, Object#notify, и Object#notifyAll являются средствами межпоточной синхронизации в Java.
Они позволяют потокам взаимодействовать друг с другом, используя общий объект как точку синхронизации.

1. wait()
Метод wait заставляет текущий поток приостановить выполнение и ждать, пока другой поток вызовет notify или
notifyAll на том же объекте.
Особенности:
 - поток освобождает монитор объекта (т.е. разблокирует synchronized блок или метод).
 - поток переходит в состояние ожидания (waiting) и не потребляет процессорное время.
 - используется внутри блока или метода, помеченного synchronized, иначе возникает IllegalMonitorStateException.

2. notify()
Метод notify будит один случайный поток, ожидающий на этом объекте (вызвавший wait).
Особенности:
 - будит только один поток, который ожидает на мониторе данного объекта.
 - если несколько потоков находятся в состоянии ожидания, будет разбужен один случайный поток (выбор не детерминирован).
 - используется внутри блока или метода, помеченного synchronized, иначе возникает IllegalMonitorStateException.

3. notifyAll()
Метод notifyAll будит все потоки, ожидающие на этом объекте.
Особенности:
 - все ожидающие потоки переводятся в состояние готовности (ready).
 - потоки соревнуются за монитор объекта, чтобы продолжить выполнение.
 - используется внутри блока или метода, помеченного synchronized, иначе возникает IllegalMonitorStateException.


6. Что за исключение IllegalMonitorStateException?
IllegalMonitorStateException — это исключение, которое выбрасывается, когда поток пытается вызвать методы wait(),
notify(), или notifyAll() без удержания монитора объекта, с которым связаны эти методы.
Это исключение помогает разработчикам корректно использовать примитивы синхронизации и предотвращает хаос в многопоточной среде.


7. Что делает метод Thread#join?
Метод Thread#join используется для ожидания завершения выполнения другого потока. Когда один поток вызывает join на другом потоке,
вызывающий поток приостанавливается до тех пор, пока второй поток не завершит свою работу.

Использование join:
1. Синхронизация потоков:
 - когда необходимо, чтобы один поток дождался завершения другого перед выполнением дальнейших операций.
2. Порядок выполнения:
 - если порядок выполнения критически важен для программы.
3. Объединение результатов:
 - когда поток выполняет задачу, результат которой нужен для продолжения работы основного потока.


8. Что делает метод Thread#interrupt?
Метод Thread#interrupt используется для отправки сигнализирующего сообщения потоку, чтобы сообщить ему о необходимости
прервать выполнение. Этот метод не останавливает поток немедленно, но устанавливает специальный флаг "interrupted",
который поток может проверить и обработать.

Использование interrupt:
1. Контроль над выполнением потока:
 - когда нужно безопасно уведомить поток о завершении работы.
2. Прерывание долгих операций:
 - например, поток выполняет вычисления или ожидание, и необходимо его остановить.
3. Работа с неблокирующими задачами:
 - в сочетании с ручной проверкой флага isInterrupted.


