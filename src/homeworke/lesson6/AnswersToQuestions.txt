1. Что означает аннотация  Before?
Аннотация @Before используется в старой версии JUnit (JUnit 4) для указания методов, которые должны выполняться перед каждым
тестовым методом в тестовом классе. Такие методы часто применяются для подготовки тестового окружения, например,
инициализации объектов, настройки начальных данных или открытия ресурсов.
В JUnit 5 аннотация @BeforeEach выполняет аналогичную функцию и заменяет @Before из JUnit 4.
Особенности:
 - многократный вызов: Метод с аннотацией @Before вызывается перед каждым тестовым методом, а не один раз для всего тестового класса.
 - подготовка тестов: Часто используется для настройки объектов и данных, которые необходимы каждому тесту.
 - изоляция тестов: Поскольку @Before вызывается перед каждым тестом, это помогает обеспечить изоляцию тестов — каждый из них
работает с "чистым" состоянием.

2. Как в тесте проверить, что метод должен бросить исключение?
В тестах, чтобы проверить, что метод бросает ожидаемое исключение, можно использовать подходы, зависящие от версии JUnit:
* JUnit 5 предоставляет метод assertThrows, который позволяет проверить, что вызываемый код бросает ожидаемое исключение.
* В JUnit 4 для проверки исключений используется аннотация @Test с параметром expected.
* Использование Mockito (для проверки взаимодействий с моками)
  Если вы тестируете метод, который должен бросить исключение при определенных условиях, можно использовать Mockito для
  имитации поведения.

3. Что такое mock? Spy?
Mock:
Mock (мок) — это объект-заглушка, созданный специально для тестирования. Он не содержит реальной логики объекта, а
полностью управляется Mockito (или другим фреймворком). Вы сами задаёте, как он должен реагировать на вызовы методов.

Основные характеристики:
Методы мока ничего не делают по умолчанию (возвращают null, 0, false или пустые коллекции).
Вы можете задать поведение мока с помощью функций вроде when(...).thenReturn(...) или doThrow(...).
Моки используются для изоляции тестируемого кода, исключая влияние других зависимостей.

Spy:
Spy (шпион) — это объект, который оборачивает реальный объект. Он сохраняет поведение оригинала, но вы можете "подсматривать"
за ним (например, проверять, какие методы были вызваны), а также модифицировать его поведение.

Основные характеристики:
Методы спая по умолчанию вызывают реальную логику объекта.
Вы можете переопределить поведение отдельных методов с помощью when(...).thenReturn(...) или doReturn(...).
Спаи полезны, когда вы хотите тестировать частично измененное поведение реального объекта.

4. Для чего применяется статический метод Mockito.verify?
Статический метод Mockito.verify используется в тестах для проверки того, что определённый метод объекта-мока был вызван во
время выполнения теста. Это позволяет убедиться, что тестируемый код взаимодействует с зависимостями правильно, например,
вызывает нужные методы с ожидаемыми параметрами, и с заданным количеством вызовов.
Основные задачи Mockito.verify:
 - проверка вызовов методов мока: Убедиться, что метод мока был вызван.
 - проверка параметров вызова: Убедиться, что метод был вызван с правильными параметрами.
 - проверка количества вызовов: Убедиться, что метод был вызван определённое количество раз.
 - проверка отсутствия вызовов: Убедиться, что метод не был вызван.

Mockito.verify полезен, когда нужно убедиться, что:
Наш код взаимодействует с зависимостями правильно.
Зависимости используются ожидаемым образом (например, с правильными аргументами или в правильном порядке).
Тестируемый метод вызывает только необходимые операции, что важно для изоляции и производительности.
Этот метод делает тесты более чёткими, контролируемыми и ориентированными на поведение.

